pval_text = paste0("p=", sapply(p.value, format_p_value)),  # Format p-values
sig = ifelse(is.na(p.value) | p.value >= 0.05, "Non-Significant", "Significant"),  # Identify significance
alpha_level = ifelse(is.na(p.value) | p.value >= 0.05, 0.3, 1),  # More transparency for non-sig points
jitter_y = as.numeric(factor(term_factor)) + runif(n(), -0.2, 0.2)  # Jitter y-axis values slightly
)
# Define colors for models
model_colors <- c("Model 1" = "#E69F00",
"Model 2" = "#0072B2",
"Model 3"= "black",
"Model 4" = "#CC79A7")
# Define shading by creating an index for each predictor group
results_df <- results_df %>%
arrange(term_factor) %>%
mutate(group = as.integer(factor(term_factor)) %% 2)  # Alternating shading
# Determine x position for p-values (offset to the right of max estimate)
x_max <- max(results_df$conf.high, na.rm = TRUE)  # Get max confidence interval upper bound
results_df <- results_df %>%
mutate(pval_x_pos = x_max + x_adj)  # Place p-values slightly to the right of max x range
# Dot-and-whisker plot with enhancements
p <- ggplot(results_df, aes(x = estimate, y = term_factor, color = Model, alpha = alpha_level)) +
# Add confidence intervals as horizontal whiskers
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2,
position = position_dodge(width = 0.75)) +
# Add dots for coefficient estimates
geom_point(position = position_dodge(width = 0.75), size = 1.25) +
# Add background shading for alternate rows
geom_rect(data = results_df, aes(ymin = as.numeric(factor(term_factor)) - 0.5,
ymax = as.numeric(factor(term_factor)) + 0.5,
xmin = -Inf, xmax = Inf,
fill = factor(group)),
inherit.aes = FALSE, alpha = 0.1) +
# Add vertical line at zero (null effect)
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50", alpha = 0.3) +
# Add jittered p-values at right side
geom_text(aes(x = pval_x_pos, y = jitter_y, label = pval_text,
fontface = ifelse(sig == "Significant", "bold", "plain")),
hjust = 1, size = 2.5) +
scale_color_manual(values = model_colors) +  # Set custom colors for models
scale_fill_manual(values = c("white", "gray90")) +  # Alternating shading
scale_alpha_identity() +  # Use manually set alpha levels
theme_minimal() +
labs(title = plot_title,
x = "Estimate (Effect Size)",
y = "Predictor",
color = "Model") +
theme(legend.position = "right",  # Move legend to the right
panel.grid.major = element_blank(),  # Remove major grid lines for clarity
panel.grid.minor = element_blank(),
plot.title = element_text(size = 11, face = 'bold', hjust = 0.5),
axis.title = element_text(size = 11),
#axis.text = element_text(size = 9),
axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 9),
legend.text = element_text(size = 9),
legend.title = element_text(size = 9)
)
return(p)
}
run_save_univariate <- function(df, outcome_column_str, data_name_string, plot_x_adj){
uni_results_all <- all_univariate_mixed_effect(data = df,
outcome_column = outcome_column_str) %>%
format_tables() %>%
mutate(Outcome = outcome_column_str) %>%
factor_term() # function above - format variable order for plots
print(head(uni_results_all))
write.csv(uni_results_all, file.path(output_dir,
outcome_column_str,
paste(outcome_column_str,
'_univariate_',
data_name_string,
'_results.csv', sep = '')))
# save adjusted r_squared
adj_r_squared_df <- uni_results_all[c('Variable', 'R2_conditional', 'R2_marginal')] %>%
distinct()  # remove duplicates
print(adj_r_squared_df)
write.csv(adj_r_squared_df, file.path(output_dir,
outcome_column_str,
paste(outcome_column_str,
'_univariate_',
data_name_string,
'_r2.csv', sep = '')))
# Plot estimates
if (outcome_column_str == 't25fw_log'){
outcome_title = 'Log T25FW'
} else if (outcome_column_str == "clean_T25FW_Avg") {
outcome_title = 'T25FW'
} else if (outcome_column_str == "t25fw_sqrt") {
outcome_title = 'Square Root T25FW'
} else if (outcome_column_str == 'PWS_velocitycmsecmean') {
outcome_title = 'Zeno PWS Velocity'
} else if (outcome_column_str == 'FW_velocitycmsecmean'){
outcome_title = 'Zeno FW Velocity'
} else {
outcome_title = outcome_column_str
}
plot_title <- paste(data_name_string, " Univariate Models\nlmer(",
outcome_title,
" ~ Predictor + (1 | ID))", sep = '')
p <- univariate_regression_plot(results = uni_results_all,
plot_title = plot_title,
x_adj = plot_x_adj)
print(p)
p
ggsave(file.path(output_dir,
outcome_column_str,
paste(outcome_column_str,
'_univariate_',
data_name_string,
'_estimates.png', sep = '')),
bg = "white", width= 6.5, height=4)
}
multivariate_save_results <- function(formula, df, outcome_column_str, model_str, output_dir){
multivar_results <- lmer(formula, data = df, REML = FALSE)
# Residuals vs. fitted values
fitted_vals <- fitted(multivar_results)
resid_vals <- resid(multivar_results)
resid_df <- data.frame(Fitted = fitted_vals, Residuals = resid_vals)
p <- ggplot(resid_df, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.6) +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
labs(
title = paste("Fitted vs Residuals:", model_str),
x = "Fitted Values",
y = "Residuals"
) +
theme_minimal()
print(p)
p
# ggsave()
# Normality
qqnorm(residuals(multivar_results), main = paste("Normal Q-Q plot:", model_str, sep = " "))
hist(resid(multivar_results), main = paste("Residuals:", model_str, sep = " "))
# tidy results
multivar_results_df <- tidy(multivar_results, conf.int = TRUE) %>%
mutate(R2_conditional = r2(multivar_results)$R2_conditional) %>%
mutate(R2_marginal = r2(multivar_results)$R2_marginal) %>%
mutate(Model = model_str) %>%
mutate(Outcome = outcome_column_str)
return(list(df = multivar_results_df, object = multivar_results))
}
bind_plot_multivar_results <- function(multi_dem_df, multi_vid_unadj_df, multi_vid_adj_df,
outcome_column_str, dataset_name, plot_x_adj) {
multivar_all <- bind_rows(multi_dem_df,
multi_vid_unadj_df,
multi_vid_adj_df) %>%
format_tables() %>%
factor_term() # function above - format variable order for plots
print(head(multivar_all))
write.csv(multivar_all, file.path(output_dir,
outcome_column_str,
paste(outcome_column_str,
'_adj_vs_unadj_',
dataset_name,
'_results.csv', sep= '')))
# save R-squared
adj_r_squared_df <- multivar_all[c('Model', 'R2_conditional', 'R2_marginal')] %>%
distinct()
print(adj_r_squared_df)
write.csv(adj_r_squared_df, file.path(output_dir,
outcome_column_str,
paste(outcome_column_str,
'_adj_vs_unadj_',
dataset_name,
'_r2.csv', sep = '')))
# plot and save plot
if (outcome_column_str == 't25fw_log'){
outcome_title = 'Log T25FW'
} else if (outcome_column_str == "clean_T25FW_Avg") {
outcome_title = 'T25FW'
} else if (outcome_column_str == "t25fw_sqrt") {
outcome_title = 'Square Root T25FW'
} else if (outcome_column_str == 'PWS_velocitycmsecmean') {
outcome_title = 'Zeno PWS Velocity'
} else if (outcome_column_str == 'FW_velocitycmsecmean'){
outcome_title = 'Zeno FW Velocity'
} else {
outcome_title = outcome_column_str
}
title <- paste(dataset_name, " Multivariate Models\nlmer(",
outcome_title,
" ~ Predictors + (1 | ID))", sep = '')
p <- adj_vs_unadj_plot(results_df = multivar_all,
plot_title = title,
x_adj = plot_x_adj)
print(p)
p
ggsave(file.path(output_dir,
outcome_column_str,
paste(outcome_column_str, '_adj_vs_unadj_',
dataset_name,
'_estimates.png', sep = '')),
bg = "white", width= 6.5, height= 4.5)
return(multivar_all)
}
# PWS
p1 <- ggplot(data = zeno_pws_df, aes(msfcEHR_T25FW.SPEED.TRIAL.1.vDate.Diff)) +
geom_histogram()
p1
# FW
p2 <- ggplot(data = zeno_fw_df, aes(msfcEHR_T25FW.SPEED.TRIAL.1.vDate.Diff)) +
geom_histogram()
p2
# home
p3 <- ggplot(data = home_df, aes(msfcEHR_T25FW.SPEED.TRIAL.1.vDate.Diff)) +
geom_histogram()
p3
# preferred walking speed
ggplot(data = zeno_pws_df, mapping = aes(clean_T25FW_Avg)) +
geom_histogram()
# log transform
zeno_pws_df$t25fw_log <- log(zeno_pws_df$clean_T25FW_Avg)
ggplot(data = zeno_pws_df, mapping = aes(t25fw_log)) +
geom_histogram()
# inverse transformation
zeno_pws_df$t25fw_inverse <- 1/zeno_pws_df$clean_T25FW_Avg
ggplot(data = zeno_pws_df, mapping = aes(t25fw_inverse)) +
geom_histogram()
# square root
zeno_pws_df$t25fw_sqrt <- sqrt(zeno_pws_df$clean_T25FW_Avg)
ggplot(data = zeno_pws_df, mapping = aes(t25fw_sqrt)) +
geom_histogram()
# Fast walking speed
ggplot(data = zeno_fw_df, mapping = aes(clean_T25FW_Avg)) +
geom_histogram()
# log transform
zeno_fw_df$t25fw_log <- log(zeno_fw_df$clean_T25FW_Avg)
ggplot(data = zeno_fw_df, mapping = aes(t25fw_log)) +
geom_histogram()
# inverse transformation
zeno_fw_df$t25fw_inverse <- 1/zeno_fw_df$clean_T25FW_Avg
ggplot(data = zeno_fw_df, mapping = aes(t25fw_inverse)) +
geom_histogram()
# square root
zeno_fw_df$t25fw_sqrt <- sqrt(zeno_fw_df$clean_T25FW_Avg)
ggplot(data = zeno_fw_df, mapping = aes(t25fw_sqrt)) +
geom_histogram()
# Home Videos
ggplot(data = home_df, mapping = aes(clean_T25FW_Avg)) +
geom_histogram()
# log transform
home_df$t25fw_log <- log(home_df$clean_T25FW_Avg)
ggplot(data = home_df, mapping = aes(t25fw_log)) +
geom_histogram()
# inverse transformation
home_df$t25fw_inverse <- 1/home_df$clean_T25FW_Avg
ggplot(data = home_df, mapping = aes(t25fw_inverse)) +
geom_histogram()
# square root
home_df$t25fw_sqrt <- sqrt(home_df$clean_T25FW_Avg)
ggplot(data = home_df, mapping = aes(t25fw_sqrt)) +
geom_histogram()
clean_t25fw_dir <- file.path(output_dir, "clean_T25FW_Avg")
if (file.exists(clean_t25fw_dir) == FALSE){
dir.create(clean_t25fw_dir)
}
t25fw_log_dir <- file.path(output_dir, "t25fw_log")
# create output folder if it doesn't already exist
if (file.exists(t25fw_log_dir) == FALSE){
dir.create(t25fw_log_dir)
}
t25fw_inverse_dir <- file.path(output_dir, "t25fw_inverse")
# create output folder if it doesn't already exist
if (file.exists(t25fw_inverse_dir) == FALSE){
dir.create(t25fw_inverse_dir)
}
t25fw_sqrt_dir <- file.path(output_dir, "t25fw_sqrt")
# create output folder if it doesn't already exist
if (file.exists(t25fw_sqrt_dir) == FALSE){
dir.create(t25fw_sqrt_dir)
}
zeno_pws_df$log_delta_pix_h_rel_median_pose_zv <- log(zeno_pws_df$delta_pix_h_rel_median_pose_zv)
zeno_fw_df$log_delta_pix_h_rel_median_pose_zv <- log(zeno_fw_df$delta_pix_h_rel_median_pose_zv)
home_df$log_delta_pix_h_rel_median_pose_hv <- log(home_df$delta_pix_h_rel_median_pose_hv)
# convert inf to NaN
zeno_pws_df[] <- lapply(zeno_pws_df, function(x) {
if (is.numeric(x)) replace(x, is.infinite(x), NA) else x
})
zeno_fw_df[] <- lapply(zeno_fw_df, function(x) {
if (is.numeric(x)) replace(x, is.infinite(x), NA) else x
})
home_df[] <- lapply(home_df, function(x) {
if (is.numeric(x)) replace(x, is.infinite(x), NA) else x
})
y_outcome_cols <- c("clean_T25FW_Avg", "t25fw_log", "t25fw_inverse", "t25fw_sqrt")
plot_outcome_transforms_vs_predictors(zeno_pws_df, y_outcome_cols, 'pws', output_dir)
pws_t25fw_outcome_col = "t25fw_log"
zeno_pws_clean_df <- zeno_pws_df %>%
drop_na(c("stride_time_median_sec_pose_zv",
"log_delta_pix_h_rel_median_pose_zv",
"mean_cadence_step_per_min_pose_zv",
"stride_width_median_cm_pose_zv"))
print(nrow(zeno_pws_clean_df))
run_save_univariate(zeno_pws_clean_df, pws_t25fw_outcome_col, 'PWS', plot_x_adj = 0.5)
run_save_univariate(zeno_pws_df, pws_t25fw_outcome_col, 'PWS', plot_x_adj = 0.5)
t25fw_pws_multi_dem_formula <- as.formula(paste(pws_t25fw_outcome_col,
"~ clean_Age +
demoEHR_DiseaseDuration +
ms_dx_condensed +
(1|bw_id)"))
t25fw_pws_multi_dem_results <- multivariate_save_results(formula = t25fw_pws_multi_dem_formula,
df = zeno_pws_clean_df,
outcome_column_str = pws_t25fw_outcome_col,
model_str = "Model 1")
t25fw_pws_multi_dem_results$df
summary(t25fw_pws_multi_dem_results$object)
t25fw_pws_multi_metrics_formula <- as.formula(paste(pws_t25fw_outcome_col, "~ stride_time_median_sec_pose_zv +
log_delta_pix_h_rel_median_pose_zv +
mean_cadence_step_per_min_pose_zv +
stride_width_median_cm_pose_zv +
stance_time_per_mean_pose_zv +
tot_dsupport_time_sec_std_pose_zv +
singlesupport_time_sec_std_pose_zv +
(1|bw_id)"))
t25fw_pws_multi_metrics_formula
t25fw_pws_multi_metrics_results <- multivariate_save_results(formula = t25fw_pws_multi_metrics_formula,
df = zeno_pws_clean_df,
outcome_column_str = pws_t25fw_outcome_col,
model_str = "Model 2")
t25fw_pws_multi_metrics_results$df
summary(t25fw_pws_multi_metrics_results$object)
t25fw_pws_multi_metrics_formula <- as.formula(paste(pws_t25fw_outcome_col, "~ stride_time_median_sec_pose_zv +
log_delta_pix_h_rel_median_pose_zv +
mean_cadence_step_per_min_pose_zv +
stride_width_median_cm_pose_zv +
(1|bw_id)"))
t25fw_pws_multi_metrics_formula
t25fw_pws_multi_metrics_results <- multivariate_save_results(formula = t25fw_pws_multi_metrics_formula,
df = zeno_pws_clean_df,
outcome_column_str = pws_t25fw_outcome_col,
model_str = "Model 2")
t25fw_pws_multi_metrics_results$df
summary(t25fw_pws_multi_metrics_results$object)
# adjusted: Metrics and MS Info
t25fw_pws_multi_vid_adj_formula <- as.formula(paste(pws_t25fw_outcome_col,
"~ stride_time_median_sec_pose_zv +
log_delta_pix_h_rel_median_pose_zv +
mean_cadence_step_per_min_pose_zv +
stride_width_median_cm_pose_zv +
clean_Age +
demoEHR_DiseaseDuration +
ms_dx_condensed +
(1|bw_id)"))
t25fw_pws_multi_vid_adj_formula
t25fw_pws_multi_vid_adj_results <- multivariate_save_results(formula = t25fw_pws_multi_vid_adj_formula,
df = zeno_pws_clean_df,
outcome_column_str = pws_t25fw_outcome_col,
model_str = "Model 3")
t25fw_pws_multi_vid_adj_results$df
summary(t25fw_pws_multi_vid_adj_results$object)
# Demographics only vs Video + Demographics
aov_1 <- anova(t25fw_pws_multi_dem_results$object, t25fw_pws_multi_vid_adj_results$object)
aov_1_df <- as.data.frame(aov_1)
# Video only vs Video + Demographics
aov_2 <- anova(t25fw_pws_multi_metrics_results$object, t25fw_pws_multi_vid_adj_results$object)
aov_2_df <- as.data.frame(aov_2)
bind_plot_multivar_results(t25fw_pws_multi_dem_results$df,
t25fw_pws_multi_metrics_results$df,
t25fw_pws_multi_vid_adj_results$df,
pws_t25fw_outcome_col,
'PWS',
plot_x_adj = 2)
y_outcome_cols <- c("clean_T25FW_Avg", "t25fw_log", "t25fw_inverse", "t25fw_sqrt")
plot_outcome_transforms_vs_predictors(zeno_fw_df, y_outcome_cols, 'FW', output_dir)
# log?
zeno_fw_clean_df <- zeno_fw_df %>%
drop_na(c("stride_time_median_sec_pose_zv",
"log_delta_pix_h_rel_median_pose_zv",
"mean_cadence_step_per_min_pose_zv",
"stride_width_median_cm_pose_zv"
))
nrow(zeno_fw_df)
nrow(zeno_fw_clean_df)
run_save_univariate(zeno_fw_df, fw_t25fw_outcome_col, 'FW', plot_x_adj = 0.5)
fw_t25fw_outcome_col = pws_t25fw_outcome_col
run_save_univariate(zeno_fw_df, fw_t25fw_outcome_col, 'FW', plot_x_adj = 0.5)
t25fw_fw_multi_dem_formula <- as.formula(paste(fw_t25fw_outcome_col,
"~ clean_Age +
demoEHR_DiseaseDuration +
ms_dx_condensed +
(1|bw_id)"))
t25fw_fw_multi_dem_results <- multivariate_save_results(formula = t25fw_fw_multi_dem_formula,
df = zeno_fw_clean_df,
outcome_column_str = fw_t25fw_outcome_col,
model_str = "Model 1")
t25fw_fw_multi_dem_results$df
summary(t25fw_fw_multi_dem_results$object)
performance(t25fw_fw_multi_dem_results$object)
t25fw_fw_multi_metrics_formula <- as.formula(paste(fw_t25fw_outcome_col, "~
log_delta_pix_h_rel_median_pose_zv +
stride_time_median_sec_pose_zv +
mean_cadence_step_per_min_pose_zv +
stride_width_median_cm_pose_zv +
(1|bw_id)"))
t25fw_fw_multi_metrics_formula
t25fw_fw_multi_metrics_results <- multivariate_save_results(formula = t25fw_fw_multi_metrics_formula,
df = zeno_fw_clean_df,
outcome_column_str = fw_t25fw_outcome_col,
model_str = "Model 2")
t25fw_fw_multi_metrics_results$df
summary(t25fw_fw_multi_metrics_results$object)
performance(t25fw_fw_multi_metrics_results$object)
# adjusted: Metrics and MS Info
t25fw_fw_multi_vid_adj_formula <- as.formula(paste(fw_t25fw_outcome_col, "~ clean_Age +
demoEHR_DiseaseDuration +
ms_dx_condensed +
log_delta_pix_h_rel_median_pose_zv +
stride_time_median_sec_pose_zv +
mean_cadence_step_per_min_pose_zv +
stride_width_median_cm_pose_zv +
(1|bw_id)"))
t25fw_fw_multi_vid_adj_formula
t25fw_fw_multi_vid_adj_results <- multivariate_save_results(formula = t25fw_fw_multi_vid_adj_formula,
df = zeno_fw_clean_df,
outcome_column_str = fw_t25fw_outcome_col,
model_str = "Model 3")
t25fw_fw_multi_vid_adj_results$df
summary(t25fw_fw_multi_vid_adj_results$object)
performance(t25fw_fw_multi_vid_adj_results$object)
t25fw_fw_multi_simple <- as.formula(paste(fw_t25fw_outcome_col, "~ clean_Age +
log_delta_pix_h_rel_median_pose_zv +
stride_time_median_sec_pose_zv +
(1|bw_id)"))
t25fw_fw_multi_simple
t25fw_fw_multi_simple_results <- multivariate_save_results(formula = t25fw_fw_multi_simple,
df = zeno_fw_clean_df,
outcome_column_str = fw_t25fw_outcome_col,
model_str = "Model 4")
t25fw_fw_multi_simple_results$df
summary(t25fw_fw_multi_simple_results$object)
adj_vs_unadj_plot(t25fw_fw_multi_simple_results$df, 'Model 4', 1.5)
performance(t25fw_fw_multi_simple_results$object)
anova_1_3 <- anova(t25fw_fw_multi_dem_results$object, t25fw_fw_multi_vid_adj_results$object)
print(anova_1_3)
anova_1_3_df <- as.data.frame(anova_1_3)
anova_1_3_df$p_formatted <- ifelse(anova_1_3_df$`Pr(>Chisq)` < 0.001, '<0.001', round(anova_1_3_df$`Pr(>Chisq)`, 3))
anova_1_3_df$Model <- c('Model 1', 'Model 3')
anova_1_3_df$Models <- c('Model 1 and 3')
anova_1_3_df$Chisq <- round(anova_1_3_df$Chisq, 2)
anova_1_3_df
predicted <- predict(t25fw_fw_multi_simple_results$object)
df <- data.frame(Observed = zeno_fw_clean_df$t25fw_log,
Predicted = predicted)
p1 <- ggplot(df, aes(x = Observed, y = Predicted)) +
geom_point(size = 0.75, alpha = 0.6) +
geom_abline(intercept = 3, slope = 1,
linetype = "dashed") +
coord_fixed(ratio = 1) +
labs(title='Model 4: Observed vs Predicted',
x ="Observed Log T25FW", y = "Predicted Log T25FW") +
theme_minimal() +
theme(plot.title = element_text(size = 9, face = 'bold', hjust = 0.5),
axis.title = element_text(size = 9),
#axis.text = element_text(size = 9),
axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 9),
legend.text = element_text(size = 9))
p1
ggsave(file.path(output_dir, fw_t25fw_outcome_col, 't25fw_log_model4_FW_predicted_observed.png'),
bg = "white", width= 3, height= 3)
fitted_vals <- fitted(t25fw_fw_multi_simple_results$object)
resid_vals <- resid(t25fw_fw_multi_simple_results$object)
resid_df <- data.frame(Fitted = fitted_vals, Residuals = resid_vals)
p2 <- ggplot(resid_df, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.6, size = 0.75) +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
labs(
title = paste('Model 4: Fitted vs Residuals'),
x = "Fitted Values",
y = "Residuals"
) +
coord_fixed(ratio = 1) +
theme_minimal() +
theme(plot.title = element_text(size = 9, face = 'bold', hjust = 0.5),
axis.title = element_text(size = 9),
#axis.text = element_text(size = 9),
axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 9),
legend.text = element_text(size = 9))
print(p2)
p2
ggsave(file.path(output_dir, fw_t25fw_outcome_col, 't25fw_log_model4_FW_residuals_fitted.png'),
bg = "white", width= 3, height= 3)
home_t25fw_outcome_col = "t25fw_log"
home_clean_df <- home_df %>%
drop_na(c("stride_time_median_sec_pose_hv",
"log_delta_pix_h_rel_median_pose_hv",
"mean_cadence_step_per_min_pose_hv",
"stride_width_median_cm_pose_hv"))
run_save_univariate(home_df, home_t25fw_outcome_col, 'Home', plot_x_adj = 1)
t25fw_home_multi_dem_formula <- as.formula(paste(home_t25fw_outcome_col,
"~ clean_Age +
demoEHR_DiseaseDuration +
ms_dx_condensed +
(1|bw_id)"))
t25fw_home_multi_dem_results <- multivariate_save_results(formula = t25fw_home_multi_dem_formula,
df = home_clean_df,
outcome_column_str = home_t25fw_outcome_col,
model_str = "Model 1")
t25fw_home_multi_dem_results$df
summary(t25fw_home_multi_dem_results$object)
t25fw_home_multi_metrics_formula <- as.formula(paste(home_t25fw_outcome_col, "~ stride_time_median_sec_pose_hv +
log_delta_pix_h_rel_median_pose_hv +
mean_cadence_step_per_min_pose_hv +
stride_width_median_cm_pose_hv +
(1|bw_id)"))
t25fw_home_multi_metrics_formula
t25fw_home_multi_metrics_results <- multivariate_save_results(formula = t25fw_home_multi_metrics_formula,
df = home_clean_df,
outcome_column_str = home_t25fw_outcome_col,
model_str = "Model 2")
t25fw_home_multi_metrics_results$df
summary(t25fw_home_multi_metrics_results$object)
