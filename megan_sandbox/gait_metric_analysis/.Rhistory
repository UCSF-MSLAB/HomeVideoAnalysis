stride_width_median_cm_pose_zv +
stance_time_per_mean_pose_zv +
tot_dsupport_time_sec_std_pose_zv,
data = zeno_pws_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = pws_multivar_video_adj,
file_name = filename)
filename = "PWS_multivar_dur_dx_race"
# model
pws_multivar_dur_dx_race <- polr(edss_severity_cat ~ demoEHR_DiseaseDuration +
ms_dx_condensed_2 +
race_ethnicity_clean_2,
data = zeno_pws_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = pws_multivar_dur_dx_race,
file_name = filename)
# calculate the log odds of being greater than or equal to each value of the target variable
s <- with(zeno_pws_edss_df, summary(as.numeric(edss_severity_cat) ~ demoEHR_DiseaseDuration +
ms_dx_condensed_2 +
race_ethnicity_clean_2,
fun=sf))
plot_check_assumption(s)
# save original levels to create df
ms_dx_levels <- levels(pws_multivar_dur_dx_race$model$ms_dx_condensed_2)
ms_dx_levels
race_levels <- levels(pws_multivar_dur_dx_race$model$race_ethnicity_clean_2)
race_levels
# Define continuous variable ranges
disease_duration_values <- seq(from = 0, to = 38, length.out = 100)
# Generate all combinations of categorical variables
cat_combinations <- expand.grid(
ms_dx_condensed_2 = ms_dx_levels,
race_ethnicity_clean_2 = race_levels,
stringsAsFactors = TRUE  # Ensures they are factors
)
head(cat_combinations)
# Expand dataset to include all continuous variable values for each categorical combination
newdat <- expand.grid(
demoEHR_DiseaseDuration = disease_duration_values,
stringsAsFactors = FALSE  # Keep continuous variables numeric
)
# Use `merge()` to properly combine categorical and continuous variables
newdat <- merge(cat_combinations, newdat, by = NULL)
# predict for each row of new dat using model
newdat <- cbind(newdat, predict(pws_multivar_dur_dx_race, newdat, type = "probs"))
head(newdat)
head(newdat)
# reshape for plotting
lnewdat <- melt(newdat, id.vars = c("demoEHR_DiseaseDuration",
"ms_dx_condensed_2",
"race_ethnicity_clean_2"),
variable.name = "Level", value.name="Probability")
head(lnewdat)
# plot all of the predicted probabilities for the different conditions.
# example
#ggplot(lnewdat, aes(x = gpa, y = Probability, colour = Level)) +
#geom_line() + facet_grid(pared ~ public, labeller="label_both")
p <- ggplot(lnewdat, aes(x = demoEHR_DiseaseDuration, y = Probability, colour = Level)) +
geom_line() +
facet_grid(ms_dx_condensed_2 ~ race_ethnicity_clean_2) +
labs(title = filename)
p
ggsave(file.path(output_dir, paste(filename, "probabilities.png", sep = "_")))
filename = "PWS_multivar_logPix_dx_race"
# model
pws_multivar_logPixdx_race <- polr(edss_severity_cat ~ log_delta_pix_h_rel_median_pose_zv +
ms_dx_condensed_2 +
race_ethnicity_clean_2,
data = zeno_pws_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = pws_multivar_logPixdx_race,
file_name = filename)
# calculate the log odds of being greater than or equal to each value of the target variable
s <- with(zeno_pws_edss_df, summary(as.numeric(edss_severity_cat) ~ log_delta_pix_h_rel_median_pose_zv +
ms_dx_condensed_2 +
race_ethnicity_clean_2,
fun=sf))
plot_check_assumption(s)
# save original levels to create df
ms_dx_levels <- levels(pws_multivar_logPixdx_race$model$ms_dx_condensed_2)
ms_dx_levels
race_levels <- levels(pws_multivar_logPixdx_race$model$race_ethnicity_clean_2)
race_levels
# Define continuous variable ranges
log_pix_values <- seq(from = -2.813, to = -0.462, length.out = 100)
# Generate all combinations of categorical variables
cat_combinations <- expand.grid(
ms_dx_condensed_2 = ms_dx_levels,
race_ethnicity_clean_2 = race_levels,
stringsAsFactors = TRUE  # Ensures they are factors
)
head(cat_combinations)
# Expand dataset to include all continuous variable values for each categorical combination
newdat <- expand.grid(
log_delta_pix_h_rel_median_pose_zv = log_pix_values,
stringsAsFactors = FALSE  # Keep continuous variables numeric
)
# Use `merge()` to properly combine categorical and continuous variables
newdat <- merge(cat_combinations, newdat, by = NULL)
# predict for each row of new dat using model
newdat <- cbind(newdat, predict(pws_multivar_logPixdx_race, newdat, type = "probs"))
head(newdat)
head(newdat)
# reshape for plotting
lnewdat <- melt(newdat, id.vars = c("log_delta_pix_h_rel_median_pose_zv",
"ms_dx_condensed_2",
"race_ethnicity_clean_2"),
variable.name = "Level", value.name="Probability")
head(lnewdat)
# plot all of the predicted probabilities for the different conditions.
# example
#ggplot(lnewdat, aes(x = gpa, y = Probability, colour = Level)) +
#geom_line() + facet_grid(pared ~ public, labeller="label_both")
p <- ggplot(lnewdat, aes(x = log_delta_pix_h_rel_median_pose_zv, y = Probability, colour = Level)) +
geom_line() +
facet_grid(ms_dx_condensed_2 ~ race_ethnicity_clean_2) +
labs(title = filename)
p
ggsave(file.path(output_dir, paste(filename, "probabilities.png", sep = "_")))
# file name
filename = "FW_univariate_log_delta_pix"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = log_delta_pix_h_rel_median_pose_zv)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ log_delta_pix_h_rel_median_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
# calculate the log odds of being greater than or equal to each value of the target variable
s <- with(zeno_fw_edss_df, summary(as.numeric(edss_severity_cat) ~ log_delta_pix_h_rel_median_pose_zv, fun=sf))
p <- plot_check_assumption(s_var = s)
# Create new dataset of all values to use for prediction
newdat <- data.frame(
log_delta_pix_h_rel_median_pose_zv = rep(seq(from = -3.219, to = -0.139, length.out = 100), 4))
# predict for each row of new dat using model
newdat <- cbind(newdat, predict(uni1, newdat, type = "probs"))
head(newdat)
# reshape for plotting
lnewdat <- melt(newdat, id.vars = c("log_delta_pix_h_rel_median_pose_zv"),
variable.name = "Level", value.name="Probability")
head(lnewdat)
# plot all of the predicted probabilities for the different conditions.
# example
#ggplot(lnewdat, aes(x = gpa, y = Probability, colour = Level)) +
#geom_line() + facet_grid(pared ~ public, labeller="label_both")
p <- ggplot(lnewdat, aes(x = log_delta_pix_h_rel_median_pose_zv, y = Probability, colour = Level)) +
geom_line() +
labs(title = filename) +
labs(title = filename)
p
ggsave(file.path(output_dir, paste(filename, "probabilities.png", sep = "_")))
filename = "FW_univariate_stride_time_median"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = stride_time_median_sec_pose_zv)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ stride_time_median_sec_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
# calculate the log odds of being greater than or equal to each value of the target variable
s <- with(zeno_fw_edss_df, summary(as.numeric(edss_severity_cat) ~ stride_time_median_sec_pose_zv, fun=sf))
p <- plot_check_assumption(s_var = s)
# Create new dataset of all values to use for prediction
newdat <- data.frame(
stride_time_median_sec_pose_zv = rep(seq(from = 0.650, to = 2.017, length.out = 100), 4))
# predict for each row of new dat using model
newdat <- cbind(newdat, predict(uni1, newdat, type = "probs"))
head(newdat)
# reshape for plotting
lnewdat <- melt(newdat, id.vars = c("stride_time_median_sec_pose_zv"),
variable.name = "Level", value.name="Probability")
head(lnewdat)
# plot all of the predicted probabilities for the different conditions.
# example
#ggplot(lnewdat, aes(x = gpa, y = Probability, colour = Level)) +
#geom_line() + facet_grid(pared ~ public, labeller="label_both")
p <- ggplot(lnewdat, aes(x = stride_time_median_sec_pose_zv, y = Probability, colour = Level)) +
geom_line() +
labs(title = filename)
p
ggsave(file.path(output_dir, paste(filename, "probabilities.png", sep = "_")))
filename = "FW_univariate_mean_cadence"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = mean_cadence_step_per_min_pose_zv)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ mean_cadence_step_per_min_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
# calculate the log odds of being greater than or equal to each value of the target variable
s <- with(zeno_fw_edss_df, summary(as.numeric(edss_severity_cat) ~ mean_cadence_step_per_min_pose_zv, fun=sf))
p <- plot_check_assumption(s_var = s)
# Create new dataset of all values to use for prediction
newdat <- data.frame(
mean_cadence_step_per_min_pose_zv = rep(seq(from = 56.4, to = 170, length.out = 100), 4))
# predict for each row of new dat using model
newdat <- cbind(newdat, predict(uni1, newdat, type = "probs"))
head(newdat)
# reshape for plotting
lnewdat <- melt(newdat, id.vars = c("mean_cadence_step_per_min_pose_zv"),
variable.name = "Level", value.name="Probability")
head(lnewdat)
# plot all of the predicted probabilities for the different conditions.
# example
#ggplot(lnewdat, aes(x = gpa, y = Probability, colour = Level)) +
#geom_line() + facet_grid(pared ~ public, labeller="label_both")
p <- ggplot(lnewdat, aes(x = mean_cadence_step_per_min_pose_zv, y = Probability, colour = Level)) +
geom_line() +
labs(title = filename)
p
ggsave(file.path(output_dir, paste(filename, "probabilities.png", sep = "_")))
filename = "FW_univariate_stride_width_median"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = stride_width_median_cm_pose_zv)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ stride_width_median_cm_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
# calculate the log odds of being greater than or equal to each value of the target variable
s <- with(zeno_fw_edss_df, summary(as.numeric(edss_severity_cat) ~ stride_width_median_cm_pose_zv, fun=sf))
p <- plot_check_assumption(s_var = s)
# Create new dataset of all values to use for prediction
newdat <- data.frame(
stride_width_median_cm_pose_zv = rep(seq(from = 5.72, to = 23.7, length.out = 100), 4))
# predict for each row of new dat using model
newdat <- cbind(newdat, predict(uni1, newdat, type = "probs"))
head(newdat)
# reshape for plotting
lnewdat <- melt(newdat, id.vars = c("stride_width_median_cm_pose_zv"),
variable.name = "Level", value.name="Probability")
head(lnewdat)
# plot all of the predicted probabilities for the different conditions.
# example
#ggplot(lnewdat, aes(x = gpa, y = Probability, colour = Level)) +
#geom_line() + facet_grid(pared ~ public, labeller="label_both")
p <- ggplot(lnewdat, aes(x = stride_width_median_cm_pose_zv, y = Probability, colour = Level)) +
geom_line() +
labs(title = filename)
p
ggsave(file.path(output_dir, paste(filename, "probabilities.png", sep = "_")))
filename = "swing_time_sec_std_pose_zv"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = swing_time_sec_std_pose_zv)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ swing_time_sec_std_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
filename = "swing_time_per_mean_pose_zv"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = swing_time_per_mean_pose_zv)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ swing_time_per_mean_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
filename = "stance_time_sec_std_pose_zv"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = stance_time_sec_std_pose_zv)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ stance_time_sec_std_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
filename = "stance_time_per_mean_pose_zv"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = stance_time_per_mean_pose_zv)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ stance_time_per_mean_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
filename = "singlesupport_time_sec_std_pose_zv"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = singlesupport_time_sec_std_pose_zv)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ singlesupport_time_sec_std_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
filename = "singlesupport_per_mean_pose_zv"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = singlesupport_per_mean_pose_zv)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ singlesupport_per_mean_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
filename = "tot_dsupport_time_sec_std_pose_zv"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = tot_dsupport_time_sec_std_pose_zv)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ tot_dsupport_time_sec_std_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
filename = "tot_dsupport_per_mean_pose_zv"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = tot_dsupport_per_mean_pose_zv)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ tot_dsupport_per_mean_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
filename = "FW_univariate_age"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = clean_Age)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ clean_Age,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
# calculate the log odds of being greater than or equal to each value of the target variable
s <- with(zeno_fw_edss_df, summary(as.numeric(edss_severity_cat) ~ clean_Age, fun=sf))
p <- plot_check_assumption(s_var = s)
# Create new dataset of all values to use for prediction
newdat <- data.frame(
clean_Age = rep(seq(from = 24, to = 80, length.out = 100), 4))
# predict for each row of new dat using model
newdat <- cbind(newdat, predict(uni1, newdat, type = "probs"))
head(newdat)
# reshape for plotting
lnewdat <- melt(newdat, id.vars = c("clean_Age"),
variable.name = "Level", value.name="Probability")
head(lnewdat)
# plot all of the predicted probabilities for the different conditions.
# example
#ggplot(lnewdat, aes(x = gpa, y = Probability, colour = Level)) +
#geom_line() + facet_grid(pared ~ public, labeller="label_both")
p <- ggplot(lnewdat, aes(x = clean_Age, y = Probability, colour = Level)) +
geom_line() +
labs(title = filename)
p
ggsave(file.path(output_dir, paste(filename, "probabilities.png", sep = "_")))
filename = "FW_univariate_disease_duration"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, y = demoEHR_DiseaseDuration)) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ demoEHR_DiseaseDuration,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
# calculate the log odds of being greater than or equal to each value of the target variable
s <- with(zeno_fw_edss_df, summary(as.numeric(edss_severity_cat) ~ demoEHR_DiseaseDuration, fun=sf))
p <- plot_check_assumption(s_var = s)
# Create new dataset of all values to use for prediction
newdat <- data.frame(
demoEHR_DiseaseDuration = rep(seq(from = 0, to = 38, length.out = 100), 4))
# predict for each row of new dat using model
newdat <- cbind(newdat, predict(uni1, newdat, type = "probs"))
head(newdat)
# reshape for plotting
lnewdat <- melt(newdat, id.vars = c("demoEHR_DiseaseDuration"),
variable.name = "Level", value.name="Probability")
head(lnewdat)
# plot all of the predicted probabilities for the different conditions.
# example
#ggplot(lnewdat, aes(x = gpa, y = Probability, colour = Level)) +
#geom_line() + facet_grid(pared ~ public, labeller="label_both")
p <- ggplot(lnewdat, aes(x = demoEHR_DiseaseDuration, y = Probability, colour = Level)) +
geom_line() +
labs(title = filename)
p
ggsave(file.path(output_dir, paste(filename, "probabilities.png", sep = "_")))
filename = "FW_univariate_ms_dx_condensed_2"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, fill = ms_dx_condensed_2)) +
geom_bar(position = "dodge")  +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ ms_dx_condensed_2,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
# calculate the log odds of being greater than or equal to each value of the target variable
s <- with(zeno_fw_edss_df, summary(as.numeric(edss_severity_cat) ~ ms_dx_condensed_2, fun=sf))
p <- plot_check_assumption(s_var = s)
filename = "FW_univariate_clean_race_ethnicity_2"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, fill = race_ethnicity_clean_2)) +
geom_bar(position = "dodge") +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ race_ethnicity_clean_2,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
# calculate the log odds of being greater than or equal to each value of the target variable
s <- with(zeno_fw_edss_df, summary(as.numeric(edss_severity_cat) ~ race_ethnicity_clean_2, fun=sf))
p <- plot_check_assumption(s_var = s)
filename = "FW_univariate_clean_Sex_2"
# plot
ggplot(zeno_fw_edss_df, aes(x = edss_severity_cat, fill = clean_Sex_2)) +
geom_bar(position = "dodge") +
labs(title = filename)
ggsave(file.path(output_dir, paste(filename, 'vs_edss.png', sep = "_")))
# model
uni1 <- polr(edss_severity_cat ~ clean_Sex_2,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = uni1,
file_name = filename)
# calculate the log odds of being greater than or equal to each value of the target variable
s <- with(zeno_fw_edss_df, summary(as.numeric(edss_severity_cat) ~ clean_Sex_2, fun=sf))
p <- plot_check_assumption(s_var = s)
filename = "FW_multivar_dem_ms_info"
# model
fw_multivar_dem_ms <- polr(edss_severity_cat ~ clean_Age +
demoEHR_DiseaseDuration +
ms_dx_condensed_2 +
race_ethnicity_clean_2 +
clean_Sex_2,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = fw_multivar_dem_ms,
file_name = filename)
# calculate the log odds of being greater than or equal to each value of the target variable
s <- with(zeno_fw_edss_df, summary(as.numeric(edss_severity_cat) ~ clean_Age +
demoEHR_DiseaseDuration +
ms_dx_condensed_2 +
race_ethnicity_clean_2 +
clean_Sex_2,
fun=sf))
p <- plot_check_assumption(s_var = s)
filename = "FW_multivar_video_unadj"
# model
fw_multivar_video_unadj <- polr(edss_severity_cat ~ log_delta_pix_h_rel_median_pose_zv +
stride_time_median_sec_pose_zv +
mean_cadence_step_per_min_pose_zv +
stride_width_median_cm_pose_zv +
stance_time_per_mean_pose_zv +
singlesupport_time_sec_std_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = fw_multivar_video_unadj,
file_name = filename)
# calculate the log odds of being greater than or equal to each value of the target variable
s <- with(zeno_fw_edss_df, summary(as.numeric(edss_severity_cat) ~ log_delta_pix_h_rel_median_pose_zv +
stride_time_median_sec_pose_zv +
mean_cadence_step_per_min_pose_zv +
stride_width_median_cm_pose_zv,
fun=sf))
plot_check_assumption(s)
filename = "FW_multivar_video_adj"
# model
fw_multivar_video_adj <- polr(edss_severity_cat ~ clean_Age +
demoEHR_DiseaseDuration +
ms_dx_condensed_2 +
race_ethnicity_clean_2 +
clean_Sex_2 +
log_delta_pix_h_rel_median_pose_zv +
stride_time_median_sec_pose_zv +
mean_cadence_step_per_min_pose_zv +
stride_width_median_cm_pose_zv +
stance_time_per_mean_pose_zv +
singlesupport_time_sec_std_pose_zv,
data = zeno_fw_edss_df, Hess=TRUE)
summary_calc_p_and_odds(polr_object = fw_multivar_video_adj,
file_name = filename)
